@startuml

' ======================
' ENUMS
' ======================
enum AppStatus {
  PENDING
  SUCCESSFUL
  UNSUCCESSFUL
  BOOKED
}

' ======================
' ABSTRACT USER CLASS
' ======================
abstract class User {
  - nric: String
  - password: String
  - name: String
  - age: int
  - maritalStatus: String
  ---------------------------
  + login(): boolean
  + changePassword(newPass: String): void
  + viewProjects(): List<Project>
}

' ======================
' APPLICANT
' ======================
class Applicant extends User {
  - application: Application
  ---------------------------
  + applyForProject(project: Project): boolean
  + withdrawApplication(): void
  + viewApplicationStatus(): void
  + submitEnquiry(project: Project, message: String): void
  + editEnquiry(enquiry: Enquiry, newContent: String): void
  + deleteEnquiry(enquiry: Enquiry): void
}

' ======================
' OFFICER
' ======================
class Officer extends Applicant {
  - assignedProject: Project
  - registrationStatus: String
  ---------------------------
  + registerAsOfficer(project: Project): boolean
  + replyToEnquiry(enquiry: Enquiry, reply: String): void
  + bookFlat(applicant: Applicant, flatType: String): void
  + generateReceipt(applicant: Applicant): Receipt
}

' ======================
' MANAGER
' ======================
class Manager extends User {
  - projectsCreated: List<Project>
  ---------------------------
  + createProject(...): Project
  + editProject(project: Project): void
  + toggleVisibility(project: Project, visible: boolean): void
  + approveApplication(application: Application): void
  + rejectApplication(application: Application): void
  + approveWithdrawal(application: Application): void
  + rejectWithdrawal(application: Application): void
  + approveOfficerRegistration(officer: Officer): void
  + generateReport(filters: String): List<String>
}

' ======================
' PROJECT
' ======================
class Project {
  - name: String
  - neighborhood: String
  - units2Room: int
  - units3Room: int
  - openDate: Date
  - closeDate: Date
  - isVisible: boolean
  - manager: Manager
  - applicants: List<Applicant>
  - officers: List<Officer>
  ---------------------------
  + isOpen(): boolean
  + getRemainingFlats(flatType: String): int
  + addApplicant(applicant: Applicant): void
  + addOfficer(officer: Officer): void
}

' ======================
' APPLICATION
' ======================
class Application {
  - applicant: Applicant
  - project: Project
  - flatType: String
  - status: AppStatus
  ---------------------------
  + setStatus(newStatus: AppStatus): void
  + withdraw(): void
}

' ======================
' ENQUIRY
' ======================
class Enquiry {
  - sender: User
  - project: Project
  - message: String
  - replies: List<String>
  ---------------------------
  + addReply(reply: String): void
}

' ======================
' RECEIPT
' ======================
class Receipt {
  - applicantName: String
  - nric: String
  - age: int
  - maritalStatus: String
  - flatType: String
  - projectName: String
  - receiptDate: Date
}

' ======================
' RELATIONSHIPS
' ======================
User <|-- Applicant
Applicant <|-- Officer
User <|-- Manager

Project "1" --> "many" Application
Applicant --> Application
Officer --> Project
Project --> Enquiry
User --> Enquiry
Officer --> Receipt

@enduml
